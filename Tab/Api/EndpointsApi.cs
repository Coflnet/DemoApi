/*
 * Whisper Asr Webservice
 *
 * Whisper ASR Webservice is a general-purpose speech recognition webservice.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Coflnet.Whisper.Client;
using Coflnet.Whisper.Model;

namespace Coflnet.Whisper.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEndpointsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Asr
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AsrAsrPost(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0);

        /// <summary>
        /// Asr
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AsrAsrPostWithHttpInfo(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0);
        /// <summary>
        /// Detect Language
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DetectLanguageDetectLanguagePost(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Detect Language
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DetectLanguageDetectLanguagePostWithHttpInfo(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEndpointsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Asr
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AsrAsrPostAsync(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Asr
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AsrAsrPostWithHttpInfoAsync(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Detect Language
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DetectLanguageDetectLanguagePostAsync(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Detect Language
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DetectLanguageDetectLanguagePostWithHttpInfoAsync(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEndpointsApi : IEndpointsApiSync, IEndpointsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EndpointsApi : IEndpointsApi
    {
        private Coflnet.Whisper.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EndpointsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EndpointsApi(string basePath)
        {
            this.Configuration = Coflnet.Whisper.Client.Configuration.MergeConfigurations(
                Coflnet.Whisper.Client.GlobalConfiguration.Instance,
                new Coflnet.Whisper.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Coflnet.Whisper.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Coflnet.Whisper.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Coflnet.Whisper.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EndpointsApi(Coflnet.Whisper.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Coflnet.Whisper.Client.Configuration.MergeConfigurations(
                Coflnet.Whisper.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Coflnet.Whisper.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Coflnet.Whisper.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Coflnet.Whisper.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EndpointsApi(Coflnet.Whisper.Client.ISynchronousClient client, Coflnet.Whisper.Client.IAsynchronousClient asyncClient, Coflnet.Whisper.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Coflnet.Whisper.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Coflnet.Whisper.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Coflnet.Whisper.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Coflnet.Whisper.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Coflnet.Whisper.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Asr 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AsrAsrPost(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0)
        {
            Coflnet.Whisper.Client.ApiResponse<Object> localVarResponse = AsrAsrPostWithHttpInfo(audioFile, encode, task, language, initialPrompt, vadFilter, wordTimestamps, output);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Asr 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Coflnet.Whisper.Client.ApiResponse<Object> AsrAsrPostWithHttpInfo(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'audioFile' is set
            if (audioFile == null)
            {
                throw new Coflnet.Whisper.Client.ApiException(400, "Missing required parameter 'audioFile' when calling EndpointsApi->AsrAsrPost");
            }

            Coflnet.Whisper.Client.RequestOptions localVarRequestOptions = new Coflnet.Whisper.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Coflnet.Whisper.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Coflnet.Whisper.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (encode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "encode", encode));
            }
            if (task != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "task", task));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (initialPrompt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "initial_prompt", initialPrompt));
            }
            if (vadFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "vad_filter", vadFilter));
            }
            if (wordTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "word_timestamps", wordTimestamps));
            }
            if (output != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "output", output));
            }
            localVarRequestOptions.FileParameters.Add("audio_file", audioFile);

            localVarRequestOptions.Operation = "EndpointsApi.AsrAsrPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/asr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsrAsrPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Asr 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AsrAsrPostAsync(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Coflnet.Whisper.Client.ApiResponse<Object> localVarResponse = await AsrAsrPostWithHttpInfoAsync(audioFile, encode, task, language, initialPrompt, vadFilter, wordTimestamps, output, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Asr 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through ffmpeg (optional, default to true)</param>
        /// <param name="task"> (optional, default to transcribe)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="initialPrompt"> (optional)</param>
        /// <param name="vadFilter">Enable the voice activity detection (VAD) to filter out parts of the audio without speech (optional, default to false)</param>
        /// <param name="wordTimestamps">Word level timestamps (optional, default to false)</param>
        /// <param name="output"> (optional, default to txt)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Coflnet.Whisper.Client.ApiResponse<Object>> AsrAsrPostWithHttpInfoAsync(System.IO.Stream audioFile, bool? encode = default(bool?), string? task = default(string?), string? language = default(string?), string? initialPrompt = default(string?), bool? vadFilter = default(bool?), bool? wordTimestamps = default(bool?), string? output = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'audioFile' is set
            if (audioFile == null)
            {
                throw new Coflnet.Whisper.Client.ApiException(400, "Missing required parameter 'audioFile' when calling EndpointsApi->AsrAsrPost");
            }


            Coflnet.Whisper.Client.RequestOptions localVarRequestOptions = new Coflnet.Whisper.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Coflnet.Whisper.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Coflnet.Whisper.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (encode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "encode", encode));
            }
            if (task != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "task", task));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (initialPrompt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "initial_prompt", initialPrompt));
            }
            if (vadFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "vad_filter", vadFilter));
            }
            if (wordTimestamps != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "word_timestamps", wordTimestamps));
            }
            if (output != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "output", output));
            }
            localVarRequestOptions.FileParameters.Add("audio_file", audioFile);

            localVarRequestOptions.Operation = "EndpointsApi.AsrAsrPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/asr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AsrAsrPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect Language 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DetectLanguageDetectLanguagePost(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0)
        {
            Coflnet.Whisper.Client.ApiResponse<Object> localVarResponse = DetectLanguageDetectLanguagePostWithHttpInfo(audioFile, encode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Language 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Coflnet.Whisper.Client.ApiResponse<Object> DetectLanguageDetectLanguagePostWithHttpInfo(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'audioFile' is set
            if (audioFile == null)
            {
                throw new Coflnet.Whisper.Client.ApiException(400, "Missing required parameter 'audioFile' when calling EndpointsApi->DetectLanguageDetectLanguagePost");
            }

            Coflnet.Whisper.Client.RequestOptions localVarRequestOptions = new Coflnet.Whisper.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Coflnet.Whisper.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Coflnet.Whisper.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (encode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "encode", encode));
            }
            localVarRequestOptions.FileParameters.Add("audio_file", audioFile);

            localVarRequestOptions.Operation = "EndpointsApi.DetectLanguageDetectLanguagePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/detect-language", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectLanguageDetectLanguagePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect Language 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DetectLanguageDetectLanguagePostAsync(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Coflnet.Whisper.Client.ApiResponse<Object> localVarResponse = await DetectLanguageDetectLanguagePostWithHttpInfoAsync(audioFile, encode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Language 
        /// </summary>
        /// <exception cref="Coflnet.Whisper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioFile"></param>
        /// <param name="encode">Encode audio first through FFmpeg (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Coflnet.Whisper.Client.ApiResponse<Object>> DetectLanguageDetectLanguagePostWithHttpInfoAsync(System.IO.Stream audioFile, bool? encode = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'audioFile' is set
            if (audioFile == null)
            {
                throw new Coflnet.Whisper.Client.ApiException(400, "Missing required parameter 'audioFile' when calling EndpointsApi->DetectLanguageDetectLanguagePost");
            }


            Coflnet.Whisper.Client.RequestOptions localVarRequestOptions = new Coflnet.Whisper.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Coflnet.Whisper.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Coflnet.Whisper.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (encode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Coflnet.Whisper.Client.ClientUtils.ParameterToMultiMap("", "encode", encode));
            }
            localVarRequestOptions.FileParameters.Add("audio_file", audioFile);

            localVarRequestOptions.Operation = "EndpointsApi.DetectLanguageDetectLanguagePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/detect-language", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectLanguageDetectLanguagePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
